apply plugin: "jacoco"

jacoco {
    toolVersion "0.8.0"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def debugCoverageSourceDirs = files([
        "src/main/java", "src/debug/java",
])

def debugExecutionData = fileTree(dir: "$buildDir", includes: [
        "jacoco/testDebugUnitTest.exec",
        "outputs/code-coverage/connected/*coverage.ec"
])

def debugClassDirectories = fileTree(
        dir: "${project.buildDir}/intermediates/classes/debug",
        excludes: [
                '**/R.class',
                '**/R$*.class',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*$Lambda$*.*',
                '**/*$inlined$*.*',
                '**/*Module.*',
                '**/*Dagger*.*',
                '**/*MembersInjector*.*',
                '**/*_Provide*Factory*.*'
        ]
)

task jacocoDebugTestCoverage(type: JacocoReport, dependsOn: ["testDebugUnitTest", "createDebugCoverageReport"]) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the debug build."

    classDirectories = debugClassDirectories

    additionalSourceDirs = debugCoverageSourceDirs
    sourceDirectories = debugCoverageSourceDirs

    executionData = debugExecutionData

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task jacocoDebugTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: ["jacocoDebugTestCoverage"]) {
    group = "Reporting"
    description = "Verify that the test coverage requirements are met."

    classDirectories = debugClassDirectories

    additionalSourceDirs = debugCoverageSourceDirs
    sourceDirectories = debugCoverageSourceDirs

    executionData = debugExecutionData

    violationRules {
        rule {
            limit {
                minimum = 0.6
            }
        }
    }
}

connectedCheck.dependsOn "jacocoDebugTestCoverage"
connectedCheck.dependsOn "jacocoDebugTestCoverageVerification"