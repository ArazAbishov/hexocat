apply plugin: "com.android.application"
apply plugin: "org.sonarqube"
apply plugin: "spoon"
apply from: rootProject.file("plugins/android-checkstyle.gradle")
apply from: rootProject.file("plugins/android-errorprone.gradle")
apply from: rootProject.file("plugins/android-paperwork.gradle")
apply from: rootProject.file("plugins/android-dexcount.gradle")
apply from: rootProject.file("plugins/android-findbugs.gradle")
apply from: rootProject.file("plugins/android-pmd.gradle")

def versions = rootProject.ext.versions
def libraries = rootProject.ext.libraries

def versionMajor = 0
def versionMinor = 0
def versionPatch = 0
def versionBuild = 1

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.tools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.sdk

        applicationId "com.abishov.hexocat"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        archivesBaseName = "app-${versionName}-${versionCode}"

        testInstrumentationRunner "com.abishov.hexocat.HexocatTestRunner"
    }

    lintOptions {
        // fail early
        abortOnError true

        // App does not have deep linking.
        disable "GoogleAppIndexingWarning"

        // Okio references java.nio that does not presented in Android SDK.
        warning "InvalidPackage"

        // casting 'InvalidPackage' error to warning
        warning 'InvalidPackage'
    }

    packagingOptions {
        // excluding duplicate license files
        exclude "META-INF/LICENSE"

        // excluding duplicate rxjava properties file
        // see https://github.com/ReactiveX/RxJava/issues/4445#issuecomment-243591879
        exclude 'META-INF/rxjava.properties'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            // custom application suffix which allows to
            // install debug and release builds at the same time
            applicationIdSuffix = ".debug"

            // jacoco test coverage reports both for
            // androidTest and test source sets
            testCoverageEnabled = true

            // Using hexocat.jks to sign debug build type.
            signingConfig = signingConfigs.debug
        }
    }

    configurations.all {
        resolutionStrategy.force "com.google.code.findbugs:jsr305:${libraries.findbugs}"
    }
}

spoon {
    debug = true
    noAnimations = true
    grantAllPermissions = true
}

dependencies {
    implementation "hu.supercluster:paperwork:${libraries.paperwork}"

    // Support libraries
    implementation "com.android.support:design:${libraries.support}"
    implementation "com.android.support:appcompat-v7:${libraries.support}"
    implementation "com.android.support:support-annotations:${libraries.support}"
    implementation "com.android.support:recyclerview-v7:${libraries.support}"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxandroid:${libraries.rxandroid}"
    implementation "io.reactivex.rxjava2:rxjava:${libraries.rxjava}"

    // Google libraries
    implementation "com.google.code.gson:gson:${libraries.gson}"

    // Google Dagger
    implementation "com.google.dagger:dagger:${libraries.dagger}"
    implementation "com.google.dagger:dagger-android-support:${libraries.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${libraries.dagger}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${libraries.dagger}"

    // Google's auto-value. Annotations are used only during compilation time, as well as
    // annotation processor which hoops up into compilation process
    compileOnly "com.jakewharton.auto.value:auto-value-annotations:${libraries.autovalueann}"
    annotationProcessor "com.google.auto.value:auto-value:${libraries.autovalue}"

    // Extension which generates mappers for work with cursors
    compileOnly "com.ryanharter.auto.value:auto-value-gson-annotations:${libraries.autovaluegson}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:${libraries.autovaluegson}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:${libraries.autovalueparcel}"

    // Square libraries
    implementation "com.squareup.picasso:picasso:${libraries.picasso}"
    implementation "com.squareup.okhttp3:okhttp:${libraries.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${libraries.okhttp}"
    implementation "com.squareup.retrofit2:retrofit:${libraries.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${libraries.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${libraries.retrofit}"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${libraries.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"

    // Jake Wharton libraries
    implementation "com.jakewharton.rxbinding2:rxbinding:${libraries.rxbindings}"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:${libraries.rxbindings}"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:${libraries.rxbindings}"
    implementation "com.jakewharton.picasso:picasso2-okhttp3-downloader:${libraries.okpicasso}"
    implementation "com.jakewharton.timber:timber:${libraries.timber}"
    implementation "com.jakewharton:butterknife:${libraries.butterknife}"
    implementation "com.jakewharton.threetenabp:threetenabp:${libraries.threetenabp}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libraries.butterknife}"

    // Plugin dependencies
    compileOnly "com.google.code.findbugs:annotations:${libraries.findbugs}"

    // Test dependencies
    testImplementation "junit:junit:${libraries.junit}"
    testImplementation "org.assertj:assertj-core:${libraries.assertj}"
    testImplementation "org.mockito:mockito-core:${libraries.mockito}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"
    testImplementation "nl.jqno.equalsverifier:equalsverifier:${libraries.equalsverifier}"

    // Spoon client which allows to capture screenshots during instrumentation tests
    androidTestImplementation "com.squareup.spoon:spoon-client:${libraries.spoon}"
    androidTestImplementation "com.github.andrzejchm.RESTMock:android:${libraries.restmock}"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${libraries.okhttp}"
    androidTestImplementation "org.mockito:mockito-android:${libraries.mockito}"
    androidTestImplementation "com.squareup.rx.idler:rx2-idler:${libraries.rxidler}"

    androidTestImplementation("com.android.support.test.espresso:espresso-idling-resource:${libraries.espresso}") {
        exclude module: "support-annotations"
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-core:${libraries.espresso}") {
        exclude module: "support-annotations"
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-intents:${libraries.espresso}") {
        exclude module: "support-annotations"
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-contrib:${libraries.espresso}") {
        exclude module: "support-annotations"
        exclude module: "recyclerview-v7"
        exclude module: "appcompat-v7"
        exclude module: "support-v4"
        exclude module: "design"
    }
}
