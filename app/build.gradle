apply plugin: "com.android.application"
apply plugin: "org.sonarqube"
apply from: rootProject.file("plugins/android-checkstyle.gradle")
apply from: rootProject.file("plugins/android-errorprone.gradle")
apply from: rootProject.file("plugins/android-paperwork.gradle")
apply from: rootProject.file("plugins/android-dexcount.gradle")
apply from: rootProject.file("plugins/android-findbugs.gradle")
apply from: rootProject.file("plugins/android-jacoco.gradle")
apply from: rootProject.file("plugins/android-pmd.gradle")

def versions = rootProject.ext.versions
def libraries = rootProject.ext.libraries

def versionMajor = 0
def versionMinor = 0
def versionPatch = 0
def versionBuild = 1

android {
    compileSdkVersion versions.sdk
    buildToolsVersion versions.tools

    defaultConfig {
        minSdkVersion versions.minsdk
        targetSdkVersion versions.sdk

        applicationId "com.abishov.hexocat"
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        archivesBaseName = "app-${versionName}-${versionCode}"

        testInstrumentationRunner "com.abishov.hexocat.HexocatTestRunner"
    }

    lintOptions {
        abortOnError true
        disable "GoogleAppIndexingWarning"
        warning "InvalidPackage"
        warning 'InvalidPackage'
    }

    packagingOptions {
        exclude "META-INF/LICENSE"
        exclude 'META-INF/rxjava.properties'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
            applicationIdSuffix = ".debug"
            signingConfig = signingConfigs.debug
        }
    }

    testOptions {
        execution "ANDROID_TEST_ORCHESTRATOR"
    }

    configurations.all {
        resolutionStrategy.force "com.google.code.findbugs:jsr305:${libraries.findbugs}"
    }
}

dependencies {
    implementation "hu.supercluster:paperwork:${libraries.paperwork}"

    // Support libraries
    implementation "com.android.support:design:${libraries.support}"
    implementation "com.android.support:appcompat-v7:${libraries.support}"
    implementation "com.android.support:support-annotations:${libraries.support}"
    implementation "com.android.support:recyclerview-v7:${libraries.support}"

    // ReactiveX
    implementation "io.reactivex.rxjava2:rxandroid:${libraries.rxandroid}"
    implementation "io.reactivex.rxjava2:rxjava:${libraries.rxjava}"

    // Google libraries
    implementation "com.google.code.gson:gson:${libraries.gson}"

    // Google Dagger
    implementation "com.google.dagger:dagger:${libraries.dagger}"
    implementation "com.google.dagger:dagger-android-support:${libraries.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${libraries.dagger}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${libraries.dagger}"

    compileOnly "com.jakewharton.auto.value:auto-value-annotations:${libraries.autovalueann}"
    annotationProcessor "com.google.auto.value:auto-value:${libraries.autovalue}"

    compileOnly "com.ryanharter.auto.value:auto-value-gson-annotations:${libraries.autovaluegson}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-gson:${libraries.autovaluegson}"
    annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:${libraries.autovalueparcel}"

    // Square libraries
    implementation "com.squareup.picasso:picasso:${libraries.picasso}"
    implementation "com.squareup.okhttp3:okhttp:${libraries.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${libraries.okhttp}"
    implementation "com.squareup.retrofit2:retrofit:${libraries.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${libraries.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${libraries.retrofit}"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${libraries.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"

    // Jake Wharton libraries
    implementation "com.jakewharton.rxbinding2:rxbinding:${libraries.rxbindings}"
    implementation "com.jakewharton.rxbinding2:rxbinding-support-v4:${libraries.rxbindings}"
    implementation "com.jakewharton.rxbinding2:rxbinding-appcompat-v7:${libraries.rxbindings}"
    implementation "com.jakewharton.picasso:picasso2-okhttp3-downloader:${libraries.okpicasso}"
    implementation "com.jakewharton.timber:timber:${libraries.timber}"
    implementation "com.jakewharton:butterknife:${libraries.butterknife}"
    implementation "com.jakewharton.threetenabp:threetenabp:${libraries.threetenabp}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${libraries.butterknife}"

    // Plugin dependencies
    compileOnly "com.google.code.findbugs:annotations:${libraries.findbugs}"

    // Unit test dependencies
    testImplementation "junit:junit:${libraries.junit}"
    testImplementation "org.assertj:assertj-core:${libraries.assertj}"
    testImplementation "org.mockito:mockito-core:${libraries.mockito}"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${libraries.leakcanary}"
    testImplementation "nl.jqno.equalsverifier:equalsverifier:${libraries.equalsverifier}"

    // Android test dependencies
    androidTestUtil "com.android.support.test:orchestrator:${libraries.testingsupport}"
    androidTestCompile "com.android.support.test:runner:${libraries.testingsupport}"
    androidTestCompile "com.android.support.test:rules:${libraries.testingsupport}"

    androidTestImplementation "com.android.support.test.espresso:espresso-idling-resource:${libraries.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${libraries.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:${libraries.espresso}"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:${libraries.espresso}"

    androidTestImplementation "com.github.andrzejchm.RESTMock:android:${libraries.restmock}"
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${libraries.okhttp}"
    androidTestImplementation "org.mockito:mockito-android:${libraries.mockito}"
    androidTestImplementation "com.squareup.rx.idler:rx2-idler:${libraries.rxidler}"
    androidTestImplementation "com.jakewharton.espresso:okhttp3-idling-resource:${libraries.okhttpIdlingResource}"
}
